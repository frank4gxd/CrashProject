 library(tidyverse)library(xgboost)#file_path <- file.choose()set.seed(230)data <- read.csv("../data/Crash_Analysis_System_(CAS)_data.csv", header = TRUE, sep = ",")dim(data)#clean datacolumns_to_drop <- c("X","Y","OBJECTID","areaUnitID","crashDirectionDescription","","crashDistance","tlaId","tlaName","crashFinancialYear","fatalCount","debris","meshblockId","northing","easting","objectThrownOrDropped","minorInjuryCount","crashLocation1","crashLocation2","directionRoleDescription","otherObject","phoneBoxEtc","seriousInjuryCount")data <- select(data, -one_of(columns_to_drop))na_percentage <- colMeans(is.na(data))columns_with_high_na <- names(na_percentage[na_percentage > 0.99])#print(columns_with_high_na)data <- data %>% select(-columns_with_high_na)#table(data$crashSeverity)data <- data %>%  mutate(crashSeverity = ifelse(crashSeverity == "Fatal Crash" | crashSeverity == "Serious Crash", 1,                      ifelse(crashSeverity == "Minor Crash" | crashSeverity == "Non-Injury Crash", 0,                             2))) %>%  filter(crashSeverity != 2)#table(data$crashSeverity)#table(data$weatherA)#table(data$weatherB)data$weatherA <- ifelse(data$weatherA %in% c("None", "Null"), "Other", data$weatherA)data$weatherB<- ifelse(data$weatherB %in% c("None", "Null"), "", data$weatherB)data <- data %>% unite(weatherA,weatherB,col=weather,sep=" ")table(data$region)data$region <- ifelse(data$region %in% c("None", "Null"), "Other", data$region)na_columns <- sapply(data, function(x) any(is.na(x)))columns_with_na <- names(data)[na_columns]#print(columns_with_na)data <- data %>%  mutate_at(vars(one_of(columns_with_na)), ~replace_na(., 0))processed_data <- dataprocessed_data[processed_data == ""] <- "others"processed_data[] <- lapply(processed_data, function(x) as.factor(x))data <- processed_datarm(processed_data)#glimpse(data)#explore datalibrary(ggplot2)#unbalanced target Labelknitr::kable(table(data$crashSeverity))ggplot(data, aes(x = crashSeverity)) +  geom_bar(fill = "blue") +  labs(title = "Histogram of crashSeverity", x = "crashSeverity", y = "Frequency")group_by_region <- data %>% group_by(crashYear,region,crashSeverity) %>% summarise(count=n())ggplot(group_by_region, aes(x = region, y = count, fill = crashSeverity)) +  geom_bar(stat = "identity", position = "dodge") +  labs(title = "Comparison of Severe and Regular Values by Region", x = "Region", y = "count") +  theme(axis.text.x = element_text(angle = 45, hjust = 2))+  facet_wrap(~crashYear,nrow=3)group_by_region <- group_by_region %>% filter(crashSeverity==1)ggplot(group_by_region, aes(x = region, y = count, fill = crashSeverity)) +  geom_bar(stat = "identity", position = "dodge") +  labs(title = "Comparison of Severe and Regular Values by Region", x = "Region", y = "count") +  theme(axis.text.x = element_text(angle = 45, hjust = 2))+  facet_wrap(~crashYear,nrow=3)group_by_weather <- data %>% group_by(region,weather,crashSeverity) %>% summarise(count=n()) ggplot(group_by_weather, aes(x = weather, y = count, fill = crashSeverity)) +  geom_bar(stat = "identity", position = "dodge") +  labs(title = "Weather Conditions in Region", x = "Weather Type", y = "Frequency") +  theme_minimal() +  theme(axis.text.x = element_text(angle = 45, hjust = 2)) + # Rotate x-axis labels if needed  facet_wrap(~region,nrow=3)group_by_weather <- group_by_weather %>% filter(crashSeverity==1)ggplot(group_by_weather, aes(x = weather, y = count, fill = crashSeverity)) +  geom_bar(stat = "identity", position = "dodge") +  labs(title = "Weather Conditions in Region", x = "Weather Type", y = "Frequency") +  theme_minimal() +  theme(axis.text.x = element_text(angle = 45, hjust = 2)) + # Rotate x-axis labels if needed  facet_wrap(~region,nrow=3)group_by_light <- data %>% group_by(region,light,crashSeverity) %>% summarise(count=n()) ggplot(group_by_light, aes(x = light, y = count, fill = crashSeverity)) +  geom_bar(stat = "identity", position = "dodge") +  labs(title = "light Conditions in Region", x = "light Type", y = "Frequency") +  theme_minimal() +  theme(axis.text.x = element_text(angle = 45, hjust = 2)) + # Rotate x-axis labels if needed  facet_wrap(~region,nrow=3)group_by_light <- group_by_light  %>% filter(crashSeverity==1)ggplot(group_by_light, aes(x = light, y = count, fill = crashSeverity)) +  geom_bar(stat = "identity", position = "dodge") +  labs(title = "light Conditions in Region", x = "light Type", y = "Frequency") +  theme_minimal() +  theme(axis.text.x = element_text(angle = 45, hjust = 2)) + # Rotate x-axis labels if needed  facet_wrap(~region,nrow=3)#sample data# Split data by classclass_data <- split(data, data$crashSeverity)# Determine desired sample size (e.g., proportionally to the original class distribution)desired_sample_size <- 5000  # Adjust as needed# Sample each classsampled_data <- lapply(class_data, function(class_subset) {  # Determine the sample size for this class  class_size <- nrow(class_subset)  class_sample_size <- min(class_size, desired_sample_size)    # Sample observations from this class  sampled_indices <- sample(1:class_size, size = class_sample_size, replace = TRUE)    # Return the sampled subset  return(class_subset[sampled_indices, ])})# Combine sampled subsetsbalanced_data <- do.call(rbind, sampled_data)#fit a model and test#fit a model and testtraining_idx <- sample(nrow(balanced_data), nrow(balanced_data)*0.8)test_idx <-(1:nrow(balanced_data))[-training_idx] training_data <- balanced_data[training_idx,]test_data <- balanced_data[test_idx,]#train_Y <- training_data$crashSeverity#train_X <- training_data %>% select(-crashSeverity)test_Y <- test_data$crashSeveritytest_X <- test_data %>% select(-crashSeverity)  library(randomForest)rf_model <- randomForest(crashSeverity ~ ., data = training_data)plot(rf_model)predictions <- predict(rf_model, newdata = test_X)accuracy <- mean(predictions == test_Y)print(accuracy)knitr::kable(table(predictions,test_Y))#analyse the importanceimportance_measures <- importance(rf_model)sorted_importance <- importance_df[order(importance_df$MeanDecreaseGini, decreasing = TRUE), , drop = FALSE]knitr::kable(head(sorted_importance,20))importance_df <- as.data.frame(importance_measures)# Add variable names as a columnimportance_df$Variable <- rownames(importance_df)# Reshape the data for ggplotimportance_df_long <- tidyr::gather(importance_df, key = "Measure", value = "Importance", -Variable)# Create the variable importance plot using ggplotggplot(importance_df_long, aes(x = reorder(Variable, Importance), y = Importance, fill = Measure)) +  geom_bar(stat = "identity") +  labs(title = "Variable Importance Plot",       x = "Predictor Variables",       y = "Importance",       fill = "Measure") +  theme_minimal() +  theme(axis.text.x = element_text(angle = 45, hjust = 1))